PROBLEM STATEMENT -https://leetcode.com/explore/learn/card/fun-with-arrays/523/conclusion/3574/

Solution : We can square the elements of nums array in O(N) TC and then sort the nums array in O(nlogn) TC . But this will give the Overall TC of 
O(nlogn) and no extra space will be required.But we want the solution in O(n) TC. 
So the algorithm idea is : First insert the values of nums array in newArray in sorted manner in O(n) TC and then square the values of newArray.
 Algorithm : (This is a generalised form of optimal solution which requires O(n) Space complexity. The more optimal solution can go in o(1) space complexity
 in some cases. We will discuss them later on.)
-------------
   given-> int[] nums
   To be returned -> int[] newArray //all the values are the squares of the values of nums array. 
Steps :
---------
1) Initialize a new integer array newArray
   ---------------------------------------
   int[] newArray = new int[nums.length] //contains 0 at every index.(Java Rules)
   ---------------------------------------
2) We have to pick the first non negative element from the nums array. Let its index be denoted by P.
    --------------------------------------
    int i=0,P;
    while(i < nums.length && nums[i]<0){
    i++;
    }
    P=i;
    --------------------------------------
    Here , 3 things can happen.
    case-1 : If no non-negative element exists,that is nums[i] >0 never happens then the loop will terminate only when i reaches to the end.In this case,
             we will traverse the elements of nums array in reverse order and fill the newArray from starting.
    --------------------------------------
    if(P == nums.length)
       for(i=nums.length-1;i>=0;i--)
          newArray[i] = nums[nums.length-1-i]
    --------------------------------------
    case-2 : If only 0 and positive numbers are present , that is , nums[i] <0 becomes false  if 0 is also present . That means the nums array is already sorted.
    This further makes sense that we don't even need an extra array . We just need to square the elements and return the nums array. But since we have taken 
    an extra array we will make use of it. We will copy the exact nums array into the newArray integer array.
    --------------------------------------
    else
    if(P == 0){
       for(i = 0;i<nums.length;i++)
           newArray[i] = nums[i];
           //alternately-> nums[i] = nums[i]*nums[i];
        //return nums;
    }
    ---------------------------------------
    case-3 : Lets be generalised . We have got an array nums which is sorted and has all the negative and positive values.Let we assume that we got our first
    non-negative element which may be 0 or positive number. Since this is the main case, the 3rd step will begin from here.

3)  Here you have to be very concious because this part is little bit tricky. 
    Main part of the algorithm : Here we start inserting the elements of nums array into the newArray in sorted manner in o(n) TC.
    We have to traverse the nums array from index P-1 to 0 and check if the absolute value of corresponding element is <=(less than or equal to) the Pth element
    (element at index P) or >(greater than) the Pth element.
     3.1) Let int x=0. //For newArray
     -------------------------------------
     int x=0;
     -------------------------------------
     3.2) Let i traverse from P-1 to 0.//For nums array
     -------------------------------------
          for(i=0; ; ) {//you will see why we didn't give any terminating condition and any increment to variable i.
     -------------------------------------
     3.2.1)Case-1 :  If absolute value of element at index i is less than or equal to element at index P then we will insert nums[i] at newArray[x] and decrement i further to 
                     do the same for the other elements.
    --------------------------------------
            if(Math.abs(nums[i]) <= nums[P]){
                 newArray[x] = nums[i];
                 i--;
            }
    --------------------------------------
    3.2.2)Case-2 : If absolute value of element at index i is greater than element at index P then we will insert nums[P] at newArray[x] and increment P further to 
                     do the same for the other elements. Since case-2 (at 3.2.2) is opposite to case-1 , we don't need to specify the else condition.
    --------------------------------------
            else{
                 newArray[x] = nums[P];
                 P++;
            }
    --------------------------------------
    3.2.3) We will increment the value of x.
    --------------------------------------
          x++;
    --------------------------------------
    3.2.4) Terminating Condition 1) If i reaches -1 . It means we have inserted all the negative elements in newArray and some positive alements may not
           be inserted into the newArray. We will insert the remaining positive elements. For this we will take another temp variable (say j) and traverse
           the nums array from P to end of nums and insert the values into the newArray and break the loop.
    --------------------------------------
           if(i == -1){
                for(int j=P;j<nums.length;j++){
                      newArray[x] = nums[j];
                      x++;
                } 
                break;
           }
    --------------------------------------
    3.2.5) Terminating Condition 2) If P reaches nums.length . It means we have inserted all the positive elements in newArray and some negative alements may not
           be inserted into the newArray. We will insert the remaining negative elements. For this we will take another temp variable (say j) and traverse
           the nums array from i to 0 and insert the values into the newArray and break the loop.
    --------------------------------------
           if(P == nums.length){
                for(int j=i;j>=0;j--){
                      newArray[x] = nums[j];
                      x++;
                }
                break;
           }
       }
     }
    --------------------------------------
    4) We have inserted all the values in proper order . The absolute values of elements in newArray are sorted . We just need to square them.
    --------------------------------------
      for(i=0;i<newArray.length;i++
          newArray[i] = newArray[i]*newArray[i];
    --------------------------------------
      return newArray;
--------------------------------------------
The Solution is : 
class Solution {
    public int[] sortedSquares(int[] nums) {
        
        int[] newArray = new int[nums.length];
        int P,i=0,x=0;
        while(i < nums.length && nums[i] <=0){
            i++;
        }
        P=i; 
        if(P==nums.length){
            for(i=0;i<nums.length;i++)
                newArray[i] = nums[nums.length-1-i];
        }
        else if(P==0){
            for(i=0;i<nums.length;i++)
                newArray[i] = nums[i];
        }
        else{
         
            for(i = P-1; ;){
                if(Math.abs(nums[i]) <= nums[P] ){
                    newArray[x] = nums[i];
                    i--;    
                }
                else{
                    newArray[x] = nums[P];
                    P++;
                }
                 x++;
                if(P == nums.length){
                    for(int j = i;j>=0;j--){
                        newArray[x] = nums[j];
                        x++;
                    }
                    break;
                }
                if(i == -1){
                    for(int j = P;j<nums.length;j++){
                        newArray[x] = nums[j];
                        x++;
                    }
                    break;
                }
               
               
           }
             
        }
        for(i=0;i<newArray.length;i++){
            newArray[i] = newArray[i] * newArray[i];
        }
        return newArray;
    }
}
